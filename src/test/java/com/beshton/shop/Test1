//https://www.baeldung.com/integration-testing-a-rest-api


@Test
public void givenUserDoesNotExists_whenUserInfoIsRetrieved_then404IsReceived()
        throws ClientProtocolException, IOException {

        // Given
        String name = RandomStringUtils.randomAlphabetic( 8 );
        HttpUriRequest request = new HttpGet( "https://api.github.com/users/" + name );

        // When
        HttpResponse httpResponse = HttpClientBuilder.create().build().execute( request );

        // Then
        assertThat(
        httpResponse.getStatusLine().getStatusCode(),
        equalTo(HttpStatus.SC_NOT_FOUND));
        }

@Test
public void
        givenRequestWithNoAcceptHeader_whenRequestIsExecuted_thenDefaultResponseContentTypeIsJson()
        throws ClientProtocolException, IOException {

        // Given
        String jsonMimeType = "application/json";
        HttpUriRequest request = new HttpGet( "https://api.github.com/users/eugenp" );

        // When
        HttpResponse response = HttpClientBuilder.create().build().execute( request );

        // Then
        String mimeType = ContentType.getOrDefault(response.getEntity()).getMimeType();
        assertEquals( jsonMimeType, mimeType );
        }


@Test
public void
        givenUserExists_whenUserInformationIsRetrieved_thenRetrievedResourceIsCorrect()
        throws ClientProtocolException, IOException {

        // Given
        HttpUriRequest request = new HttpGet( "https://api.github.com/users/eugenp" );

        // When
        HttpResponse response = HttpClientBuilder.create().build().execute( request );

        // Then
        GitHubUser resource = RetrieveUtil.retrieveResourceFromResponse(
        response, GitHubUser.class);
        assertThat( "eugenp", Matchers.is( resource.getLogin() ) );
        }

public class GitHubUser {

    private String login;

    // standard getters and setters
}
public static <T> T retrieveResourceFromResponse(HttpResponse response, Class<T> clazz)
        throws IOException {

        String jsonFromResponse = EntityUtils.toString(response.getEntity());
        ObjectMapper mapper = new ObjectMapper()
        .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
        return mapper.readValue(jsonFromResponse, clazz);
        }